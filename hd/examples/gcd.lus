
function GCD_body (a, b : int) returns (ao, bo : int);
let
  ao, bo = if a = b then (a, -1) else 
    if (a = 1 or b = 1) then (1, -1) else 
    if a < b then (a, b-a) else (b, a-b);
tel

node GCDSp1 (a0, b0 : int) returns (ai, bi, ao : int; finished : bool);
(* contract
   guarantee if finished then ao = GCD(ai, bi);
*)
var a, b, bo : int;
let
  ao, bo = GCD_body(a, b);
  ai, bi = (a0, b0) -> if pre bo < 0 then (a0, b0) else pre (ai, bi);
  a, b = (ai, bi) -> if pre bo < 0 then (ai, bi) else pre (ao, bo);
  finished = bo < 0;
tel

--

node IntfS (a, b, a1, b1: int; v, v3 : bool) returns (ai, bi, o, bo: int; vo : bool);
let
  vo = true -> (pre v) or v3;
  ai, bi, o, bo = (a, b, a, b) -> if pre v then (a, b, a, b) else (a, b, a1, b1);
tel

node DoneS (a, b, a1, b1 : int; v : bool) returns (ai, bi, r, s, l : int; vo, v2 : bool);
let
  r, vo = if a1 = b1 then (a1, v) else 
    if (a = 1 or b = 1) then (1, v) else
    (0, false);
  v2 = v and not vo;
  s, l = if a1 < b1 then (a1, b1) else (b1, a1);
  ai, bi = (a, b) -> if pre (false -> pre (false -> pre vo)) then (a, b) else pre (ai, bi);
tel

node CompS (s, l : int; v : bool) returns (a, b : int; v3 : bool);
let
  v3 = v; 
  a = s; b = l - s;
tel

node GCDSp3 (a, b : int) returns (ai, bi, r : int; vo : bool);
var ai1, bi1, ao, bo, s, l, a1, b1: int; v1, v2, v3 : bool;
let
  ai1, bi1, ao, bo, v1 = (a, b, 0, 0, false) -> pre IntfS(a, b, a1, b1, vo, v3);
  ai, bi, r, s, l, vo, v2 = 
    (0, 0, 0, 0, 0, false, false) -> pre DoneS(ai1, bi1, ao, bo, v1);
  a1, b1, v3 = (0, 0, false) -> pre CompS(s, l, v2);

  --%MAIN;
tel

-- eof
node Filter(in: real) returns (out: real)
(*@contract
  assume -1.0 <= in and in <= 1.0 ;
  guarantee -1.0 < out and out < 1.0 ; -- valid (at 25)
*)
var sum, D1, D2: real;
let
  sum = 0.0582*in - (-1.49*D1) - 0.881*D2;
  D1 = 0.0 -> pre sum;
  D2 = 0.0 -> pre D1;
  out = (sum - D2) / 1.25;

  -- MAIN ;
tel

node Main (in : real) returns (out : real)
(*@contract
  assume -1.0 <= in and in <= 1.0 ;
  guarantee out < 1.0 ;
*)
let
  --out = Filter(in) ; -- valid (k=25) w/ compositional (k=7)
  out = Filter(Filter(in)) ; -- valid w/ compositional (k=11)

  --%MAIN ;
tel

-- eof